"""
Copyright (C)
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this program. If not, see https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)#fulltext. 

For license issues, please contact:

Dr. Bing Ye
Life Sciences Institute
University of Michigan
210 Washtenaw Avenue, Room 5403
Ann Arbor, MI 48109-2216
USA

Email: bingye@umich.edu
"""

import os
import shutil

import cv2
import numpy as np
import wx


class SortBehaviors(wx.Frame):
    def __init__(self, title):
        super(SortBehaviors, self).__init__(parent=None, title=title, size=(1000, 240))
        self.input_path = None
        self.result_path = None
        self.keys_behaviors = {}
        self.keys_behaviorpaths = {}

        self.display_window()

    def display_window(self):
        panel = wx.Panel(self)
        boxsizer = wx.BoxSizer(wx.VERTICAL)

        module_inputfolder = wx.BoxSizer(wx.HORIZONTAL)
        button_inputfolder = wx.Button(
            panel,
            label="Select the folder that stores\nunsorted behavior examples",
            size=(300, 40),
        )
        button_inputfolder.Bind(wx.EVT_BUTTON, self.input_folder)
        wx.Button.SetToolTip(
            button_inputfolder,
            'Select a folder that stores the behavior examples generated by "Generate Behavior Examples" functional unit. All examples in this folder should be in pairs (animation + pattern image).',
        )
        self.text_inputfolder = wx.StaticText(
            panel, label="None.", style=wx.ALIGN_LEFT | wx.ST_ELLIPSIZE_END
        )
        module_inputfolder.Add(
            button_inputfolder, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10
        )
        module_inputfolder.Add(
            self.text_inputfolder, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10
        )
        boxsizer.Add(0, 10, 0)
        boxsizer.Add(module_inputfolder, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        boxsizer.Add(0, 5, 0)

        module_outputfolder = wx.BoxSizer(wx.HORIZONTAL)
        button_outputfolder = wx.Button(
            panel,
            label="Select the folder to store\nthe sorted behavior examples",
            size=(300, 40),
        )
        button_outputfolder.Bind(wx.EVT_BUTTON, self.output_folder)
        wx.Button.SetToolTip(
            button_outputfolder,
            "A subfolder will be created for each behavior type under the behavior name.",
        )
        self.text_outputfolder = wx.StaticText(
            panel, label="None.", style=wx.ALIGN_LEFT | wx.ST_ELLIPSIZE_END
        )
        module_outputfolder.Add(
            button_outputfolder, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10
        )
        module_outputfolder.Add(
            self.text_outputfolder, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10
        )
        boxsizer.Add(module_outputfolder, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        boxsizer.Add(0, 5, 0)

        module_keynames = wx.BoxSizer(wx.HORIZONTAL)
        button_keynames = wx.Button(
            panel,
            label="Enter a single character shortcut key and\nthe corresponding behavior name",
            size=(300, 40),
        )
        button_keynames.Bind(wx.EVT_BUTTON, self.input_keys)
        wx.Button.SetToolTip(
            button_keynames,
            'Format: "shortcutkey-behaviorname". "o", "p", "q", and "u" are reserved for "Previous", "Next", "Quit", and "Undo". When hit a shortcut key, the behavior example pair will be moved to the folder named after the corresponding behavior name.',
        )
        self.text_keynames = wx.StaticText(
            panel, label="None.", style=wx.ALIGN_LEFT | wx.ST_ELLIPSIZE_END
        )
        module_keynames.Add(button_keynames, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        module_keynames.Add(self.text_keynames, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        boxsizer.Add(module_keynames, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        boxsizer.Add(0, 5, 0)

        button_sort = wx.Button(panel, label="Sort behavior examples", size=(300, 40))
        button_sort.Bind(wx.EVT_BUTTON, self.sort_behaviors)
        wx.Button.SetToolTip(
            button_sort,
            "You will see each example pair in the screen one by one and can use shortcut keys to sort them into folders of the behavior types.",
        )
        boxsizer.Add(0, 5, 0)
        boxsizer.Add(button_sort, 0, wx.RIGHT | wx.ALIGN_RIGHT, 90)
        boxsizer.Add(0, 10, 0)

        panel.SetSizer(boxsizer)

        self.Centre()
        self.Show(True)

    def input_folder(self, event):
        dialog = wx.DirDialog(self, "Select a directory", "", style=wx.DD_DEFAULT_STYLE)
        if dialog.ShowModal() == wx.ID_OK:
            self.input_path = dialog.GetPath()
            self.text_inputfolder.SetLabel(
                "Unsorted behavior examples are in: " + self.input_path + "."
            )
        dialog.Destroy()

    def output_folder(self, event):
        dialog = wx.DirDialog(self, "Select a directory", "", style=wx.DD_DEFAULT_STYLE)
        if dialog.ShowModal() == wx.ID_OK:
            self.result_path = dialog.GetPath()
            self.text_outputfolder.SetLabel(
                "Sorted behavior examples will be in: " + self.result_path + "."
            )
        dialog.Destroy()

    def input_keys(self, event):
        keynamepairs = ""
        stop = False

        while stop is False:
            dialog = wx.TextEntryDialog(
                self,
                'Enter key-behaviorname pairs separated by ",".',
                "Format: key1-name1,key2-name2,...",
                value=keynamepairs,
            )
            if dialog.ShowModal() == wx.ID_OK:
                keynamepairs = dialog.GetValue()
                try:
                    for pair in keynamepairs.split(","):
                        key = pair.split("-")[0]
                        name = pair.split("-")[1]
                        if len(key) > 1:
                            wx.MessageBox(
                                "Key must be a single character.",
                                "Error",
                                wx.OK | wx.ICON_ERROR,
                            )
                            break
                        if key in ["O", "o", "P", "p", "U", "u", "Q", "q"]:
                            wx.MessageBox(
                                "The " + key + " is reserved. Please use another key.",
                                "Error",
                                wx.OK | wx.ICON_ERROR,
                            )
                            break
                        else:
                            self.keys_behaviors[key] = name
                    self.text_keynames.SetLabel(
                        "The key-behaviorname pairs: " + keynamepairs + "."
                    )
                    stop = True
                except:
                    wx.MessageBox(
                        "Please follow the correct format: key1-name1,key2-name2,....",
                        "Error",
                        wx.OK | wx.ICON_ERROR,
                    )
            else:
                stop = True
        dialog.Destroy()

    def sort_behaviors(self, event):
        if (
            self.input_path is None
            or self.result_path is None
            or len(self.keys_behaviors.items()) == 0
        ):
            wx.MessageBox(
                "No input / output folder or shortcut key - behavior name pair specified.",
                "Error",
                wx.OK | wx.ICON_ERROR,
            )

        else:
            for key in self.keys_behaviors:
                behavior_path = os.path.join(self.result_path, self.keys_behaviors[key])
                self.keys_behaviorpaths[key] = behavior_path
                os.makedirs(behavior_path, exist_ok=True)

            cv2.namedWindow("Sorting Behavior Examples", cv2.WINDOW_NORMAL)
            actions = []
            index = 0
            stop = False
            moved = False
            only_image = False

            check_animations = [
                i for i in os.listdir(self.input_path) if i.endswith(".avi")
            ]
            if len(check_animations) == 0:
                check_images = [
                    i for i in os.listdir(self.input_path) if i.endswith(".jpg")
                ]
                if len(check_images) == 0:
                    wx.MessageBox("No examples!", "Error", wx.OK | wx.ICON_ERROR)
                    stop = True
                else:
                    only_image = True

            while stop is False:
                if moved is True:
                    moved = False
                    if only_image is False:
                        shutil.move(
                            os.path.join(self.input_path, example_name + ".avi"),
                            os.path.join(
                                self.keys_behaviorpaths[shortcutkey],
                                example_name + ".avi",
                            ),
                        )
                    shutil.move(
                        os.path.join(self.input_path, example_name + ".jpg"),
                        os.path.join(
                            self.keys_behaviorpaths[shortcutkey], example_name + ".jpg"
                        ),
                    )

                if only_image is False:
                    animations = [
                        i for i in os.listdir(self.input_path) if i.endswith(".avi")
                    ]
                    animations = sorted(
                        animations,
                        key=lambda name: int(name.split("_len")[0].split("_")[-1]),
                    )
                else:
                    animations = [
                        i for i in os.listdir(self.input_path) if i.endswith(".jpg")
                    ]

                if len(animations) > 0 and index < len(animations):
                    example_name = animations[index].split(".")[0]
                    pattern_image = cv2.resize(
                        cv2.imread(
                            os.path.join(self.input_path, example_name + ".jpg")
                        ),
                        (600, 600),
                        interpolation=cv2.INTER_AREA,
                    )

                    if only_image is False:
                        frame_count = example_name.split("_len")[0].split("_")[-1]
                        animation = cv2.VideoCapture(
                            os.path.join(self.input_path, example_name + ".avi")
                        )
                        fps = round(animation.get(cv2.CAP_PROP_FPS))

                    while True:
                        if only_image is False:
                            ret, frame = animation.read()
                            if not ret:
                                animation.set(cv2.CAP_PROP_POS_FRAMES, 0)
                                continue
                            frame = cv2.resize(
                                frame, (600, 600), interpolation=cv2.INTER_AREA
                            )
                            combined = np.hstack((frame, pattern_image))
                            cv2.putText(
                                combined,
                                "frame count: " + frame_count,
                                (10, 15),
                                cv2.FONT_HERSHEY_SIMPLEX,
                                0.5,
                                (255, 255, 255),
                                1,
                            )
                            x_begin = 550
                        else:
                            combined = pattern_image
                            x_begin = 5

                        n = 1
                        for i in ["o: Prev", "p: Next", "q: Quit", "u: Undo"]:
                            cv2.putText(
                                combined,
                                i,
                                (x_begin, 15 * n),
                                cv2.FONT_HERSHEY_SIMPLEX,
                                0.5,
                                (255, 255, 255),
                                1,
                            )
                            n += 1
                        n += 1
                        for i in self.keys_behaviors:
                            cv2.putText(
                                combined,
                                i + ": " + self.keys_behaviors[i],
                                (x_begin, 15 * n),
                                cv2.FONT_HERSHEY_SIMPLEX,
                                0.5,
                                (255, 255, 255),
                                1,
                            )
                            n += 1

                        cv2.imshow("Sorting Behavior Examples", combined)
                        cv2.moveWindow("Sorting Behavior Examples", 50, 0)

                        if only_image is False:
                            key = cv2.waitKey(int(1000 / fps)) & 0xFF
                        else:
                            key = cv2.waitKey(1) & 0xFF

                        for shortcutkey in self.keys_behaviorpaths:
                            if key == ord(shortcutkey):
                                example_name = animations[index].split(".")[0]
                                actions.append([shortcutkey, example_name])
                                moved = True
                                break
                        if moved is True:
                            break

                        if key == ord("u"):
                            if len(actions) > 0:
                                last = actions.pop()
                                shortcutkey = last[0]
                                example_name = last[1]
                                if only_image is False:
                                    shutil.move(
                                        os.path.join(
                                            self.keys_behaviorpaths[shortcutkey],
                                            example_name + ".avi",
                                        ),
                                        os.path.join(
                                            self.input_path, example_name + ".avi"
                                        ),
                                    )
                                shutil.move(
                                    os.path.join(
                                        self.keys_behaviorpaths[shortcutkey],
                                        example_name + ".jpg",
                                    ),
                                    os.path.join(
                                        self.input_path, example_name + ".jpg"
                                    ),
                                )
                                break
                            else:
                                wx.MessageBox(
                                    "Nothing to undo.", "Error", wx.OK | wx.ICON_ERROR
                                )
                                continue

                        if key == ord("p"):
                            index += 1
                            break

                        if key == ord("o"):
                            if index >= 1:
                                index -= 1
                            break

                        if key == ord("q"):
                            stop = True
                            break

                    if only_image is False:
                        animation.release()

                else:
                    if len(animations) == 0:
                        wx.MessageBox(
                            "Behavior example sorting completed!",
                            "Completed!",
                            wx.OK | wx.ICON_INFORMATION,
                        )
                        stop = True
                    else:
                        wx.MessageBox(
                            "This is the last behavior example!",
                            "To the end.",
                            wx.OK | wx.ICON_INFORMATION,
                        )
                        index = 0

            cv2.destroyAllWindows()
